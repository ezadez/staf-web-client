<!--

테스트 케이스내의 Step의 tdl 작성 내용과 실제 수행 결과를 한눈에 볼 수 있는 페이지가 필요.
작성에서부터 실행 및 결과 확인까지 확인 가능한 통합적인 tool이 필요하다.

action이 run일 경우 target에 focus가 오면 자동으로 stepblock search popup, 혹은 자동 완성 을 표시

각각의 phase에 추가된 stepBlock에 대한 preview 기능 필요.
각각의 phase에 추가된 stepBlock에 대한 삭제 기능 필요
각각의 phase에 추가된 stepBlock 실행 순서 표시
  예) stepBlock1 -> stepBlock2

이미 기 작성된 testCase의 복사본을 불러오기 기능 필요

중간 중간 임시 저장 기능 필요 (* tab 이동 시 임시 저장 할 것)
localStorageSystem

  완료 시 중간 저장된 데이터는 삭제


Dashboard 기능 필요
 - 최근 추가된 testcase
    e.g. testCaseId, who, when
 - 최근 추가된 steBlock, variables ....
    - 갯수 조정 기능능

 - 최근 실행된 testcase result


** template, parameter 입력 시 templateId에 해당하는 메세지가 포함한 변수 목록을 parameter에 표시하도록 한다.
  {
    header: login,
    payload: {
      id : ${id},
      name: ${name}
    }
  }

  >> paramter 표시 내용 >>  id="", name=""

***** Back-log items *****
//TODO 각 종류별 block에 대한 id와 함께 package도 입력을 받도록 해야 하지 않나 고려해야함

공통 기능
  1. 임시 저장
    1.1. 작성중인 각 block에 대해 임시 저장 기능을 제공한다.

  2. 각 block별 입력 항목에 대한 입력 제한
    //TBD

TestCase
  1.1 TestCase model 정의
    1.1.1 TestCase
      1.1.1.1 id
      1.1.1.2 TestThread List

    1.1.2 TestThread
      1.1.2.1 id
      1.1.2.2 TestStage List

    1.1.3 TestStage
      1.1.3.1. Phases
        - setup
        - test target
        - tear down
      1.1.3.2. TestStage variables

    1.1.4 Phase
      1.1.4.1. phase parameter
      1.1.4.2. phase step blocks

    1.1.5 StepBlocks
      1.1.5.1. id
      1.1.5.2. step list

  1.2 테스트 케이스 작성 양식(form) 디자인 및 정의
    1.2.1. TestCase 작성 화면 로딩 시 기본 하나의 TestCase 양식이 표시되어야 한다. (done)
    1.2.2. TestCase에 포함되는 모든 요소가 화면에 표시되어야 한다.  (done)
      - TestCaseId
      - TestCaseAssertion
      - TestThreadId
      - StepBlocks of each Phase in a TestStage
      - Variable
      - Users
      - CardDeck
      - ...
    1.2.3. 한번에(TestCase 작성 화면을 나오기 전까지) 여러개의 TestCase를 작성할 수 있어야 한다. (done)
    1.2.4. 이미 작성된 혹은 작성 중인 TestCase를 복사하여 새로운 TestCase 입력 form을 표시할 수 있어야 한다. (done)
    1.2.5. 이미 작서된 혹은 작성 중인 TestCase를 수정 할 수 있어야 한다. (* partial: editing stepBlock in eash phase is not implemented)
    1.2.5. 이미 작서된 혹은 작성 중인 TestCase를 삭제 할 수 있어야 한다. (done)
    1.2.7. 작성 중인 TestCase를 임시 저장 할 수 있어야 한다.
    1.2.8. 이미 작서된 혹은 작성 중인 TestCase 입력 form을 최소화 할 수 있어야 한다. (done)
    1.2.9. 각각의 phase에 추가된 stepBlock를 미리 보기 할 수 있어야 한다.
    1.2.10. 각각의 phase에 추가된 stepBlock를 삭제 할 수 있어야 한다.
    1.2.11. 각각의 phase에 추가된 stepBlock를 수정 할 수 있어야 한다.
    1.2.12. 각각의 phase에 추가된 stepBlock 실행 순서 표시를 할 수 있어야 한다. 예를 들어 StepBlock1 -> StepBlock2 -> StepBlock3, 화살표(->) 클릭 시 호출 시 넘기는 매겨변수 표시를 할 수 있어야 한다.
    1.2.13. 작성 완료된 TestCase를 simulate 해 볼 수 있어야한다.


Step-Block
  1. StepBlock Model 정의
    1.1. StepBlock id
    1.2. StepBlock arguments
    1.3. Step
      1.3.1. seq
      1.3.2. User
      1.3.3. action
      1.3.4. target
      1.3.5. template id
      1.3.6. step parameter
      1.3.7. delay
      1.3.8. timeout
      1.3.9. comment

  2. 기능 정의
    2.1. StepBlock에 대한 id를 반드시 입력 받도록 할 수 있어야 한다.
    2.2. StepBlock의 parameter를 입력 받을 수 있고, 정해진 양식에 어긋 날 경우 표시를 할 수 있어야 한다.
      2.2.1. parameter 입력 시 괄호는 자동으로 처리 하도록 한다. parameter를 표시할 경우에는 함께 표시, 저장될 경우는 괄호는 저장하지 않는다.
    2.3. id, parameter 선언부가 동일한 StepBlock은 선언 할 수 없도록 할 수 있어야 한다.
      - 해당 화면 및 이미 작성되어 저장된 StepBlock까지도 포함한다.
    2.4. 한번에 여러개의 Step을 입력 할 수 있어야 한다.
      2.4.1. 기본 10개 혹은 기본 step 갯수를 입력 받도록 한다.
    2.5. step의 아래와 같은 속성을 입력 받을 수 있어야 하며 각 항목의 양식 혹은 정해진 입력값에 대한 규칙에 어긋날 경우 표시를 할 수 있어야 한다.
      2.5.1. seq : 숫자 혹은 "HOOK"이라는 문자열만 허용한다.
      2.5.2. User: 입력 하지 않을 수 있지만 정의되지 않은 User는 사용할 수 없다. 단 STAF System에서 제공하는 아래와 User에 대한 예약어는 허용한다.
        2.5.2.1. User를 입력 하지 않을 경우 anonymous라는 User를 사용한다. (* 기본 anonymous를 user입력 란에 설정한다. )
        - CURRENT_USER
        - ALL_USER
        - ALL_EXCEPT_CURRENT
        - PLAY_USERS
        - PLAY_EXCEPT_CURRENT
      2.5.3. action: 문자열만 가능하며 정의되지 않은 action은 입력 할 수 없다.  (* core, egn 따로 따로 있는데 action을 어떻게 통합 관리할 것인지? )
      2.5.4. target:
        2.5.4.1. action이 run일 경우 : target은 stepBlock을 지칭한다. 따라서 존재하는 StepBlock만 입력 가능 하도록 한다.
        2.5.4.2. action이 run이 아닌 경우: 문자열, 숫자 제한은 없다.
      2.5.5. template id: 문자열, 숫자 제한은 없다.
      2.5.6. step parameter
        2.5.6.1. templateId를 사용할 경우: key=value 형태이어야 한다.
        2.5.6.2. 위의 경우가 아닌 경우: json, xml 형태이어야 한다.
      2.5.7. delay <<milli-second>>: 숫자값만 입력 가능하다.
      2.5.8. timeout: <<second>>: 숫자값만 입력 가능하다.
      2.5.9. comment: 입력 제한이 없다.


//TODO: TestCase와 variable을 새로 작성 시 이 둘을 어떻게 엮을 지 생각해야 함
Variable-Block
  1. VariableBlock model 정의
    1.1. VaribleBlock id (*optional)
    1.2. variables
      - system variables
      - user variables
    1.3. variable name
    1.4. variable value
  2. 기능 정의
    2.1. VaribleBlock에 대한 id값을 입력 할 수 있도록 한다.
    2.2. 동일한 VaribleBlock id는 허용하지 않도록 한다.
    2.3. VaribleBlock에 대한 id값의 유무에 따라 include 가능 여부를 설정한다. (id: null or empty >> enableInclude: false) : ** 다시 고려 해야함 **
    2.4. 시스템 변수 목록을 제공하여야 한다. 단 deprecated된 변수는 표시 하지 않는다.
      2.4.1. {name: "TESTCASE_TIMEOUT_IN_SEC", type: "number", unit: "seconds", deprecated: false}
      2.4.2. {name: "DEFAULT_TEMPLATE_FOLDER", type: "path" , deprecated: false}
      2.4.3. {name: "TEMPLATE_ROOT_PATH", type: "path" , deprecated: false}
      2.4.4. {name: "DEFAULT_DELAY_IN_MSEC", type: "number", unit: "milli-seconds" , deprecated: false}
      2.4.5. {name: "DEFAULT_TARGET", type: "url" , deprecated: false}
      2.4.6. {name: "DEFAULT_STEP_TIMEOUT_IN_SEC", type: "number", unit: seconds , deprecated: false}
      2.4.7. {name: "DEFAULT_HOOK_TIMEOUT_IN_SEC", type: "number", unit: seconds , deprecated: false}
      2.4.8. {name: "STEP_FACTORY_CLASS", type: "class" , deprecated: false}
      2.4.9. {name: "REPORT_BUILDER_CLASS", type: "class" , deprecated: false}
      2.4.10. {name: "MESSAGE_POST_PROCESSOR_CLASS", type: "class" , deprecated: false}
      2.4.11. {name: "ASSERT_POST_PROCESSOR_CLASS", type: "class", deprecated: false}
      2.4.12. {name: "SCENARIO_DESCRIPTION_SHEET_NAME", type: "string" , deprecated: false}
    2.4. 시스템 변수와 사용자 정의 변수를 구분하여 입력할 수 있도록 해야 한다.
    2.5. 동일한 변수가 정의될 경우, 이전 변수에 중복되고, 무시된다는 표시를 해주어야 한다.
    2.6. 대문자와 _로만 이루어진 변수를 사용할 수 없도록 한다. 해당 규칙에 어긋 나는 입력값이 있을 경우 에러를 표시하도록 한다.
    2.7. ${name${number}}와 같이 변수내의 변수는 지원하지 않는다. 사용자가 해당 사항을 입력 시 에러를 표시하도록 한다.
    2.8. 변수값의 내용(variable value)에 이미 정의된 변수 사용시 해당 변수가 적용된 결과를 표시 할 수 있어야 한다.
    2.9. 기본 변수 값은 공백이다.
    2.10. 모든 변수 값은 문자열로 처리 되도록 하여야 한다.

User-Block
  1. UserBlock model 정의
    1.1. UserBlock id
    1.2. User Count
    1.3. User Name prefix (e.g. "TU000" + X)
    1.4. Users
      1.4.1. default attributes
        - name (* 문자,숫자만 입력 가능)
        - manual (Y/N)
      1.4.2. variant attributes
        - whatever

  2. 기능 정의
    2.1. UserBlock 대한 id값을 입력 할 수 있도록 한다.
    2.2. 동일한 UserBlock id는 허용하지 않도록 한다.
    2.3. User Count 입력후 해당 입력도니 User Count만큼 User들을 입력 할 수 있도록 생성하여야 한다.
    2.4. User Count만큼 User들을 입력 form 생성 시 User Name prefix를 user name 앞에 붙여야 한다.
    2.5. User 입력 form 제공 시 기본 속성 (name, manual 여부)는 기본으로 제공한다.
    2.6. User 입력 form 생성 후 사용자의 입력에 따라 User의 속성을 추가/삭제 할 수 있어야 한다.
      2.6.1 동일 User에 대해 동일 속성명은 한번만 입력 할 수 있도록 한다. 재 입력 시 경고 표시
        - 동일한 속성이 존재합니다.
    2.7. 이미 입력된 User를 복사할 수 있어야 한다.
    2.8. 이미 입력된 User를 수정할 수 있어야 한다.
    2.9. 이미 입력된 User를 삭제할 수 있어야 한다.
    2.10 동일 UserBlock내에서 이미 입력된 User와 동일한 이름을 가진 유저 입력 시 경고를 표시하여야 한다.
      - 이미 동일한 name을 가진 유저가 존재합니다.


Template-Block
  1. Template model 정의
    1.1. template package
    1.2. template id
    1.3. tempalte message header
      - key=value pair
      - 각 pair는 콤마(,)로 구분된다.
    1.4. tempalte message body
      1.3.1. simple text
      1.3.2. json
      1.3.3. xml
  2. 기능 정의
    2.1. template에 대한 package를 입력 할 수 있도록 한다.
      2.1.1. 동일 package에 복수의 template을 등록할 수 있어야 한다.
    2.2. template에 대한 id를 입력 할 수 있도록 한다.
    2.3. template message에 대한 header를 입력 할 수 있어야 한다.
      2.3.1. 입력된 header 값이 규칙에 어긋날 경우 경고를 표시한다.
    2.4. template message에 대한 body를 입력 할 수 있어야 한다.
      2.4.1. template message에 대한 body 입력 시 아래와 같은 body type을 선택 할 수 있어야 한다.
        2.4.1.1. simple text : 입력 값에 대한 제한이 없다.
        2.4.1.2. json: json 형식에 어긋 날 경우 경고를 표시하여야 한다.
        2.4.1.4. xml: xml 형식에 어긋날 경우 경고를 표시하여야 한다.

CardDeck-Block
  1. CardDeckBlock model 정의
    1.1. CardDeckBlock id
    1.2. CardDeck
      1.2.1. seat
      1.2.2. cards
  2. 기능 정의
    2.1. CardDeckBlocke에 대한 package를 입력 할 수 있도록 한다.
      2.1.1. 동일 package에 복수의 CardDeck을 등록할 수 있어야 한다.
    2.2. CardDeckBlock에 대한 id를 입력 할 수 있어야 한다.
    //TBD


Dashboard
    1. Dashboard 정의 : Dashboard를 통해 사용자는 아래의 block에 대한 현황을 확인 할 수 있다.
      1.1. TestCases
        1.1.1. 총 TestCase갯수
        1.1.2. package별 총 TestCase갯수
          1.1.2.1. 총 갯수 선택 시 상세 목록 표시
        1.1.3. 최근 실행 TestCases
          1.1.3.1. 최근 실행 일자
          1.1.3.2. 최근 TestCase별 실행 결과
        1.1.4. 최근 등록 TestCases

      1.2. StepBlocks
        1.2.1. 총 StepBlocks갯수
        1.2.2. package별 총 StepBlocks갯수
          1.2.2.1. 총 갯수 선택 시 상세 목록 표시
        1.2.3. 최근 등록 StepBlocks

      1.3. VariableBlocks
        1.3.1. 총 VariableBlocks갯수
        1.3.2. package별 총 VariableBlocks갯수
          1.3.2.1. 총 갯수 선택 시 상세 목록 표시
        1.3.3. 최근 등록 VariableBlocks

      1.4. UserBlocks
        1.4.1. 총 UserBlocks갯수
        1.4.2. package별 총 UserBlocks갯수
          1.4.2.1. 총 갯수 선택 시 상세 목록 표시
        1.4.3. 최근 등록 UserBlocks

-->
